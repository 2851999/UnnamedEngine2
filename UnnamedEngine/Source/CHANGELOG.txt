-------------------------------------------------------------
Release 3 | Beta 0 | Development 2 | Experimental 5

* Experimenting with path tracing

-------------------------------------------------------------
Release 3 | Beta 0 | Development 2 | Experimental 4

* Added RaytracedScene

* Some cleanup

-------------------------------------------------------------
Release 3 | Beta 0 | Development 2 | Experimental 3

* Adding basic PBR to RenderTest

-------------------------------------------------------------
Release 3 | Beta 0 | Development 2 | Experimental 2

* Added ability to assign multiple miss shaders in
  RaytracingPipeline
* Added raytraced reflections to RaytracingTest

* Some cleanup

-------------------------------------------------------------
Release 3 | Beta 0 | Development 2 | Experimental 1

* Added SHADER_TEXTURE_PASSTHROUGH shader and
  GRAPHICS_PIPELINE_TEXTURE_PASSTHROUGH graphics pipeline

* Modfied RaytracingTest to render the raytracing result
  the right way up using rasterised rendering

-------------------------------------------------------------
Release 3 | Beta 0 | Development 2 (V0.5.7)

* Added RaytracingTest
* Added RaytracingPipeline
* Added SSBO
* Added ShaderBuffer
* Added 'additionalVkUsageFlags' to IBO, VBO and RenderData
  setup methods as well as a boolean 'raytracing' to
  MeshRenderData for assigning these flags so they are setup
  to be used in the creation of a BLAS/TLAS
* Added ability to add storage textures/acceleration
  structures to a DescriptorSet (used for raytracing)
* Added 'loadExternalFunction' to Vulkan
* Added various extension methods used for raytracing in
  VulkanExtensions
* Added 'materialIndices' to MeshData for storing material
  indexes for use when raytracing
* Added ability to add SSBOs to DescriptorSet's
* Added a way to assign VkShaderStageFlags in
  DescriptorSetLayout

* Renamed UBOs/SSBOs in DescriptorSet to just ShaderBuffer's

* Started looking into adding raytracing

-------------------------------------------------------------
Release 3 | Beta 0 | Development 1 | Experimental 8

* Some cleanup

-------------------------------------------------------------
Release 3 | Beta 0 | Development 1 | Experimental 7

* Added ShaderBuffer

* Added a way to assign VkShaderStageFlags in
  DescriptorSetLayout

* Renamed UBOs/SSBOs in DescriptorSet to just ShaderBuffer's

* Some cleanup

-------------------------------------------------------------
Release 3 | Beta 0 | Development 1 | Experimental 6

* Added SSBO

* Added ability to add SSBOs to DescriptorSet's

-------------------------------------------------------------
Release 3 | Beta 0 | Development 1 | Experimental 5

* Improved fix for material colours in RaytracingTest

-------------------------------------------------------------
Release 3 | Beta 0 | Development 1 | Experimental 4

* Temporary fix for material colours in RaytracingTest

-------------------------------------------------------------
Release 3 | Beta 0 | Development 1 | Experimental 3

* Added 'materialIndices' to MeshData for storing material
  indexes for use when raytracing

* Investigation into adding materials in raytracing test

* Some cleanup

-------------------------------------------------------------
Release 3 | Beta 0 | Development 1 | Experimental 2

* Added RaytracingPipeline
* Added 'additionalVkUsageFlags' to IBO, VBO and RenderData
  setup methods as well as a boolean 'raytracing' to
  MeshRenderData for assigning these flags so they are setup
  to be used in the creation of a BLAS/TLAS
* Added ability to add storage textures/acceleration
  structures to a DescriptorSet (used for raytracing)
* Added 'loadExternalFunction' to Vulkan
* Added various extension methods used for raytracing in
  VulkanExtensions

* Modified RaytracingTest to work with models with more
  than one material

* Some cleanup

-------------------------------------------------------------
Release 3 | Beta 0 | Development 1 | Experimental 1

* Added RaytracingTest

* Started looking into adding raytracing

-------------------------------------------------------------
Release 3 | Beta 0 | Development 1 (V0.5.6)

* Added VulkanFeatures
* Added Colour::BROWN & PURPLE
* Added compileEngineShader(s)ToSPIRV methods to Renderer
  for compiling engine shaders to SPIRV
* Added 'videoRaytracing' setting (highly experimental, for
  Vulkan only)

* Fixed bug: Duplicate assignment of a matrix element in
  Quaternion::toRotationMatrix
* Fixed bug: Billboarded SDF text did not face the camera
* Fixed bug: SSR was incorrect when moving
* Fixed bug: Crash when adding more than one extension
             while validation layers are enabled

* Some cleanup

* Updated to VulkanSDK 1.3.204

-------------------------------------------------------------
Release 3 | Beta 0 | Development 0 | Experimental 4

* Added VulkanFeatures

* Some cleanup

-------------------------------------------------------------
Release 3 | Beta 0 | Development 0 | Experimental 3

* Added 'videoRaytracing' setting (highly experimental, for
  Vulkan only)

* Fixed bug: Crash when adding more than one extension
             while validation layers are enabled

* Updated to VulkanSDK 1.3.204

-------------------------------------------------------------
Release 3 | Beta 0 | Development 0 | Experimental 2

* Added Colour::BROWN & PURPLE
* Added compileEngineShader(s)ToSPIRV methods to Renderer
  for compiling engine shaders to SPIRV

* Fixed bug: Duplicate assignment of a matrix element in
  Quaternion::toRotationMatrix
* Fixed bug: Billboarded SDF text did not face the camera

* Some cleanup

-------------------------------------------------------------
Release 3 | Beta 0 | Development 0 | Experimental 1

* Fixed bug: SSR was incorrect when moving

--------------------------------------------------------------
Release 3 (V0.5.5)

* Major rewrite of rendering system to integrate
  Vulkan better

* Added CSVFile
* Added DebugProfiler
* Added DescriptorSet
* Added DescriptorSetLayout
* Added GraphicsPipeline
* Added GraphicsPipelineLayout
* Added utils_vulkan
* Added RenderPass
* Added Framebuffer
* Added VulkanBufferObject
* Added IBO
* Added methods to MLAttribute to obtain data as a
  Vector2/3/4f
* Added method to remove a SubData from MeshData
* Added method to Sprite to obtain a specific collision
  rectangle for the sprite with certain applied offsets (like
  offsets in TextureAtlas)
* Added methods to assign the time of a Timer
* Added methods in MeshBuilder to build a wireframe quad
* Added 'updateTimeBetweenFrames' method in Animation2D
* Added screen space reflections for PBR deferred rendering
  in RenderScene
* Added bloom for PBR deferred rendering in RenderScene
* Added FXAA to RenderScene
* Added spot light shadows
* Added 'videoVulkan' setting to debug info
* Added basic support for layout(set) for Vulkan in shaders
  (Removed when using OpenGL)
* Added 'renderOffscreen' method in BaseEngine
* Added 'useView' method for Camera which should be used
  when things should be rendered according to that camera's
  point of view
* Added support for arrays of textures in Vulkan
* Added parameters in Shader methods to append "#define NAME"
  to the beginning of shaders before compilation when using
  Vulkan or OpenGL
* Added Vulkan support to most things
* Added basic SDF font support
* Added VBOUsage enum class to specify the usage of VBO's
* Added 'clearDefaultDepthBufferOnLoad' in VulkanSwapChain
  to allow depth information to be loaded when rendering to
  the default depth buffer instead of cleared
* Added 'samples' parameter in FramebufferAttachment
* Added FramebufferAttachmentInfo struct that is taken in
  FBO constructor instead of FramebufferAttachment*
* Added generalised enums for various TextureParameters
* Added billboarded SDF text rendering in Font/Text
* Added parameters that can be changed to customise SDF text
  rendering using a Font instance
* Added parameters in the constructor of Light to allow the
  shadow map range for directional lights to be configured
* Added 'textureParameters' to the FramebufferAttachment
  constructor

* Changed Sprite and TextureAnimation2D to allow multiple
  textures to be added as layers for when multiple textures
  should be rendered at the same time
* Changed MeshLoader to output the error text from Assimp if
  a file fails to load
* Changed Animation2D to use a Timer to work out the current
  frame (Should make behaviour better if the delta is very
  small or large)
* Changed PostProcessor to allow for rendering to multiple
  colour attachments
* Changed Light to update on creation if they cast shadows
* Change to VulkanTest to make OpenGL and Vulkan look similar
* Changed shaders to use separate UBO for per-model data and
  added a descriptor set for this
* Changed Light to extend Camera3D instead of GameObject3D
* Changed GUITextBox to improve default text rendering
  performance
* Changed GUIComponentRenderer to improve rendering
  performance
* Changed basic PBR lighting so that the amount of ambient
  lighting can be controlled by RenderScene
* Changed VBO to assume the VulkanBufferObject should be
  updatable when usage is anything other than
  DataUsage::STATIC
* Changed UBO to use DataUsage instead of the OpenGL usage
* Changed UBO to use VulkanBufferObject
* Changed RenderData to use the current GraphicsPipeline
  bound to determine the primitive topology to use when
  using OpenGL
* Changed SkyBox to take a Texture instance instead of
  Cubemap for better compatability with
  FramebufferAttachment
* Changed equirectangular to cubemap generation in
  PBREnvironment to use a geometry shader
* Changed irradiance cubemap generation in PBREnvironment to
  use a geometry shader
* Changed FBO so texture parameters given in a 
  FramebufferAttachment are not overridden
* Changed prefilter cubemap generation in PBREnvironment to
  use a geometry shader
* Changed Shader 'loadShaderSource' to ignore additional
  occurences of #version such that the one that appears
  first is taken (this means versions before includes take
  precedence)
* Changed ShaderInterface to only create
  DescriptorSetLayout's when needed
* Changed RenderPass so more FBO configurations can be used

* Moved RenderShader to a different file
* Moved 'swapChainFramebuffers' from VulkanRenderPass to
  VulkanSwapChain
* Moved 'viewportWidth/Height' parameters to GraphicsPipeline
  constructor instead of GraphicsPipelineLayout

* Renamed ShaderBlock_Lighting struct to
  ShaderBlock_LightBatch in ShaderInterface
* Renamed ShaderBlock_Core struct to ShaderBlock_Camera in
  ShaderInterface
* Renamed FramebufferStore to FramebufferAttachment
* Renamed shader LightingDeferredGeom to
  DeferredLightingGeometry
* Renamed shader TerrainDeferredGeom to
  DeferredTerrainGeometry
* Renamed 'clamp' to 'addressMode' in TextureParameters
* Renamed shader EquiToCubeGen to GenEquiToCube
* Renamed shader BRDFIntegrationMapGen to
  GenBRDFIntegrationMap
* Renamed shader IrradianceMapGen to GenIrradianceMap 
* Renamed shader PrefilterMapGen to GenPrefilterMap

* Rewrote FBO

* Removed FramebufferTest3D
* Removed SurfaceTest
* Removed PostProcessing
* Removed VulkanGraphicsPipeline
* Removed GraphicsState
* Removed TextureSet
* Removed GeometryBuffer
* Removed VulkanRenderPass
* Removed examples folder
* Removed IBL and Bloom for the time being
* Removed 'Offsets' from TextureAtlas
* Removed 'deltaSeconds' from Sprite
* Removed ShaderInterface::BLOCK_ constants
* Removed VBOUsage enum and replaced with DataUsage
* Removed 'usage' parameter in Tilemap::loadTilemap as now
  determined by whether the map is editable or not

* Replaced TextureSet with DescriptorSet in Material
* Replaced include guards with '#pragma once'
* Replaced SHADER_VULKAN_LIGHTING with SHADER_LIGHTING
* Replaced SHADER_VULKAN_LIGHTING_SKINNING with
  SHADER_LIGHTING_SKINNING

* Fixed bug: GUILabel would not work with a NULL font
* Fixed bug: utils_string::strSplit with a character for a
             delimeter behaved differently to the same method
             for a string type (if string's last letter was
             the given delimeter then it would not return an
             empty string for it)
* Fixed bug: Crash when loading a tilemap with Tilemap and
             TilemapLayer
* Fixed bug: Crash when updating Text with an empty string
* Fixed bug: Explicit instantiations of VBO should have been
             after the definitions in VBO.cpp
* Fixed bug: Using MSAA with Vulkan would cause a crash on
             some systems

* Fixed bug: Font did not transition the texture it uses to
             VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL when
             using Vulkan
* Fixed bug: Fullscreen windows using vsync was capped to
             60Hz even when a higher refresh rate monitor
			 was used
* Fixed bug: Crash when trying to render an object without
             indices when using Vulkan
* Fixed bug: MSAA would not work when using Vulkan
* Fixed bug: Defines added to shaders were added many times
* Fixed bug: Camera's 'useView' method would fail in Vulkan
             unless a graphics pipeline was bound
* Fixed bug: Loading a '.model' file caused the creation of
             a Material that was never deleted
* Fixed bug: 'Font::destroy' was never called
* Fixed bug: 'initOrthographic' in Matrix4f was incorrect for
              use with Vulkan
* Fixed bug: Had output data in ShadowCubemapShader.vs that
             was not used in ShadowCubemapShader.gs
* Fixed bug: ParticleEmitter emitted new particles that
             would be rendered over all others in a
			 ParticleSystem
* Fixed bug: Default value of 'maxCharacters' in Text was
             not assigned

* Note: Now require a pipeline to render anything in Vulkan/
        OpenGL

* Some cleanup